[ { "title": "JavaScript - 참조 타입 &amp; 함수 타입(Reference Types &amp; Function Type)", "url": "/posts/javascript-reference-types-function-type/", "categories": "Programming, JavaScript", "tags": "javascript, reference types, function type, function declarations versus function expressions, function properties and methods, name property, length property, prototype property, custom properties, apply method, call method, bind method, 자바스크립트, 참조 타입, 함수 타입, 함수 선언 vs 함수 표현식, 함수 프로퍼티와 메서드, name 프로퍼티, length 프로퍼티, prototype 프로퍼티, 커스텀 프로퍼티, apply 메서드, call 메서드, bind 메서드", "date": "2021-07-24 04:45:00 +0900", "snippet": "Function 타입ECMAScript에서 함수는 객체이다.모든 함수는 Function 타입의 인스턴스이며 객체와 마찬가지로 프로퍼티와 메서드가 있다.함수의 이름은 단순히 함수 객체를 가리키는 포인터 역할을 할 뿐이다.function greetings(name) { console.log(`Hello! ${name}.`);}let greet = greetings;greet(&#39;Gunn&#39;); // &quot;Hello! Gunn.&quot;greetings = null;greet(&#39;Gunn&#39;); // ..." }, { "title": "JavaScript - 실행 컨텍스트와 스코프(Execution Context and Scope)", "url": "/posts/javascript-execution-context-and-scope/", "categories": "Programming, JavaScript", "tags": "javascript, execution context and scope, execution context, scope, activation object, variable object, scope chain, this value, global execution context, execution phase, function execution context, creation phase, 자바스크립트, 실행 컨텍스트와 스코프, 실행 컨텍스트, 스코프, 활성화 객체, 변수 객체, 스코프 체인, this 값, 전역 실행 컨텍스트, 함수 실행 컨텍스트, 실행 컨텍스트의 생성 단계, 실행 컨텍스트의 실행 단계", "date": "2021-07-17 05:30:00 +0900", "snippet": "실행 컨텍스트실행 컨텍스트는 코드의 런타임 평가를 추적하는 데 사용한다.즉, 실행 컨텍스트는 자바스크립트 코드가 실행되는 환경을 말하며 코드 실행을 위해 필요한 정보를 담고 있다.실행 컨텍스트는 추상화된 개념이므로 코드로 직접 접근은 불가능하다. 실행 컨텍스트에는 변수 객체, 스코프 체인, this 값이 있다.실행 컨텍스트의 종류로는 전역 실행 컨텍스트, 함수 실행 컨텍스트가 있다. 실행 컨텍스트의 종류에는 Eval 실행 컨텍스트도 있다. eval 함수가 호출되면 자체적인 실행 컨텍스트를 갖지만 eval 함수의 사용을 권장하..." }, { "title": "JavaScript - 원시 값과 참조 값 &amp; 값 복사(Primitive and Reference Values &amp; Copying Values)", "url": "/posts/javascript-primitive-and-reference-values-and-copying-values/", "categories": "Programming, JavaScript", "tags": "javascript, primitive values, reference values, copying values, object cloning, shallow copy, deep copy, 자바스크립트, 원시 값, 참조 값, 값 복사, 객체 복제, 얕은 복사, 깊은 복사", "date": "2021-07-08 17:50:00 +0900", "snippet": "값 복사값에 의한 값 복사let num1 = 5;let num2 = num1;num1 = 10;console.log(num2); // 5num1에는 5가 저장되어 있다. num1을 num2에 대입하면 num1에 저장된 값 5를 새로 생성한 뒤에 값 복사가 이루어진다.num1과 num2는 각각 독립적인 존재이기 때문에 어느 한쪽에서 값이 바뀌어도 다른 쪽에는 영향이 없다.참조에 의한 값 복사참조 값 같은 경우 변수를 다른 변수에 복사할 때 원시 값과는 다른 방식으로 값 복사가 이루어진다.참조 값은 변수에 객체 자체가 저장되는 것..." }, { "title": "JavaScript - 원시 값과 참조 값 &amp; 동적 프로퍼티(Primitive and Reference Values &amp; Dynamic Properties)", "url": "/posts/javascript-primitive-and-reference-values-and-dynamic-properties/", "categories": "Programming, JavaScript", "tags": "javascript, primitive values, reference values, dynamic properties, primitive wrapper objects, 자바스크립트, 원시 값, 참조 값, 동적 프로퍼티, 원시 래퍼 객체", "date": "2021-07-07 05:00:00 +0900", "snippet": "원시 값과 참조 값자바스크립트의 변수에는 원시 값과 참조 값 두 가지 타입의 값을 저장할 수 있다. 원시 값 string, number, bigint, boolean, undefined, symbol, null 참조 값 object변수에 값이 할당되면 자바스크립트 엔진은 할당된 값이 원시 값인지 참조 값인지 판단하게 되는데 어떤 값이냐에 따라 값에 접근하는 방식이 다르다.원시 값은 변수에 실제 값으로 저장되기 때문에 값으로 접근하지만 참조 값은 객체 자체가 저장되는 것이 아니라 객체에 대한 참조 값이 저장되기 때문에 참..." }, { "title": "Electron - 일렉트론 앱 만들기(Create an Electron App)", "url": "/posts/electron-create-an-electron-app/", "categories": "Framework, Electron", "tags": "electron, electron app, create an electron app, getting started with electron, 일렉트론, 일렉트론 앱, 일렉트론 앱 만들기, 일렉트론 시작하기", "date": "2021-07-02 03:25:00 +0900", "snippet": "일렉트론 시작하기초기 셋업일랙트론을 시작하기 위해서는 Node.js, npm, Electron, Chromium을 설치해야한다.Node.js와 npm 설치 후 터미널에 다음 명령을 실행해 관련 패키지를 설치한다.npm i -D electron@latest프로젝트 폴더를 만들고 터미널에 다음 명령을 실행해 관련 패키지를 설치한다.npm install --save-dev electronpackage.json 파일의 형식은 다음과 같아야 한다.{ &quot;name&quot;: &quot;my-electron-app&quot;, ..." }, { "title": "JavaScript - 데이터 타입 &amp; 문자열 타입(Data Types &amp; The String Type)", "url": "/posts/javascript-data-types-and-the-string-type/", "categories": "Programming, JavaScript", "tags": "javascript, data types, the string type, 자바스크립트, 데이터 타입, 문자열 타입, 문자열 관련 메서드", "date": "2021-07-01 22:55:00 +0900", "snippet": "문자열 타입자바스크립트는 타 언어와 달리 글자 하나만 저장하는 데이터 타입이 없다.모든 글자는 문자열 형태로 저장되며, 인코딩 방식에 상관없이 UTF-16 형식을 따른다.1&#39;use strict&#39;let str = &#39;Hello&#39;;str[0] = &#39;J&#39;; // TypeError: Attempted to assign to readonly property.console.log(str[0]); // &#39;H&#39;자바스크립트의 문자열은 immutable이기 때문에 글자를 바꾸려고 하면 읽기..." }, { "title": "JavaScript - 데이터 타입 &amp; 숫자 타입(Data Types &amp; The Number Type)", "url": "/posts/javascript-data-types-and-the-number-type/", "categories": "Programming, JavaScript", "tags": "javascript, data types, the number type, infinity, nan, not a number, 자바스크립트, 데이터 타입, 숫자 타입, 무한대, 숫자가 아님", "date": "2021-06-30 17:20:00 +0900", "snippet": "숫자 타입15; // 1515.134; // 15.134010 // 80xA // 102 ** 9999 // Infinity(-2) ** 9999 // -Infinity15.00 // 151 * (10 ** 21) // 1e+211 / 10000000 // 1e-71 / &#39;문자&#39; // NaN4번 줄은 8진법으로 숫자 8을 표현했다. 8진수는 첫 번째 숫자가 0으로 시작해야 한다.5번 줄은 16진법으로 숫자 10을 표현했다. 16진수는 0x로 시작해야 한다.7번과 8번 줄은 ECMAScript로 나타낼 수 있는 숫..." }, { "title": "JavaScript - 함수의 인수(Argument of a function)", "url": "/posts/javascript-argument-of-a-function/", "categories": "Programming, JavaScript", "tags": "javascript, functions, parameter, arguments, signature, function overloading, 자바스크립트, 함수, 매개변수, 인수, 시그니처, 함수 오버로딩", "date": "2021-06-27 14:10:00 +0900", "snippet": "함수의 인수function sum() { let total = 0; for(arg in arguments) { total += arguments[arg]; } console.log(total);}sum(10, 5); // 15sum(10, &#39; 더하기 &#39;, 5, &#39;는?&#39;); // 10 더하기 5는?sum함수의 매개변수를 선언하지 않았지만 sum함수를 호출할 때 여러 개의 인수를 매개변수로 넘겼다.하지만 인터프리터는 에러로 판단하지 않으며, 프로그램은 정상적으로 동작한다.이는 자바스크립트의..." } ]
