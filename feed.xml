<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://gunnkimkr.github.io/</id><title>Gunn’s Blog</title><subtitle>프론트엔드 개발자 김건의 블로그입니다. 개발에 관한 정보를 공유하는 것은 물론, 다양한 주제의 소통창구로 이용할 수 있습니다.</subtitle> <updated>2021-10-23T05:55:31+09:00</updated> <author> <name>Gunn Kim</name> <uri>https://gunnkimkr.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://gunnkimkr.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://gunnkimkr.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2021 Gunn Kim </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>JavaScript - 스코프와 호이스팅(Scopoe and Hoisting)</title><link href="https://gunnkimkr.github.io/posts/javascript-scope-and-hoisting/" rel="alternate" type="text/html" title="JavaScript - 스코프와 호이스팅(Scopoe and Hoisting)" /><published>2021-10-23T05:51:00+09:00</published> <updated>2021-10-23T05:51:00+09:00</updated> <id>https://gunnkimkr.github.io/posts/javascript-scope-and-hoisting/</id> <content src="https://gunnkimkr.github.io/posts/javascript-scope-and-hoisting/" /> <author> <name>Gunn Kim</name> </author> <category term="Programming" /> <category term="JavaScript" /> <summary> 스코프 스코프는 식별자, 즉 변수에 접근할 수 있는 유효 범위를 말한다. ES6 이전까지 JavaScript엔 전역 스코프와 함수 스코프만 존재 했다. 블록 스코프 개념은 ES6부터 등장한다. 변수의 선언 위치는 코드에서 변수의 접근 가능 여부에 영향을 미친다. ES6 이전까지의 스코프 var globalVar = 'Global'; function fnA() { var localVarA = 'LocalA'; console.log(globalVar, localVarA); // Global, LocalA function fnB() { var localVarB = 'LocalB'; var localVarA = 'Redeclaration of LocalVarA'; ... </summary> </entry> <entry><title>JavaScript - 데이터 불변성(Data Immutability)</title><link href="https://gunnkimkr.github.io/posts/javascript-data-immutability/" rel="alternate" type="text/html" title="JavaScript - 데이터 불변성(Data Immutability)" /><published>2021-10-16T04:30:00+09:00</published> <updated>2021-10-16T04:30:00+09:00</updated> <id>https://gunnkimkr.github.io/posts/javascript-data-immutability/</id> <content src="https://gunnkimkr.github.io/posts/javascript-data-immutability/" /> <author> <name>Gunn Kim</name> </author> <category term="Programming" /> <category term="JavaScript" /> <summary> 데이터 불변성 데이터 불변성이란 변경할 수 없는 데이터의 성질을 말한다. 자바스크립트 변수에 할당하는 데이터의 타입엔 원시 타입과 참조 타입이 있다. 원시 타입 데이터는 불변 데이터이고 참조 타입 데이터는 가변 데이터이다. 자바스크립트는 이 두 데이터 타입을 각각 다른 방식으로 변수에 저장하고 접근한다. 원시 타입 데이터에 접근할 때는 값으로 접근하고 참조 타입 데이터에는 값이 저장된 메모리 공간에 대한 참조 값으로 접근한다. 원시 타입 데이터에 값으로 접근 let str01 = 'Gunn'; let str02 = str01; str01 = 'Jun'; console.log(str01); // Jun console.log(str02); // Gunn 메모리 공간에 저장된 원시 데이... </summary> </entry> <entry><title>JavaScript - 가비지 컬렉션(Garbage Collection)</title><link href="https://gunnkimkr.github.io/posts/javascript-garbage-collection/" rel="alternate" type="text/html" title="JavaScript - 가비지 컬렉션(Garbage Collection)" /><published>2021-08-14T23:55:00+09:00</published> <updated>2021-09-19T22:59:53+09:00</updated> <id>https://gunnkimkr.github.io/posts/javascript-garbage-collection/</id> <content src="https://gunnkimkr.github.io/posts/javascript-garbage-collection/" /> <author> <name>Gunn Kim</name> </author> <category term="Programming" /> <category term="JavaScript" /> <summary> 가비지 컬렉션 자바스크립트는 실행 환경에서 코드를 실행하는 중에 메모리를 관리하는데, 개발자가 직접 메모리를 관리하지 않아도 자바스크립트는 필요한 메모리를 할당하고 더 이상 사용하지 않는 메모리는 회수한다. 예를 들어, 함수 내에 선언된 지역 변수는 함수를 실행할 때 생성된다. 이 지역 변수는 함수의 실행이 마치면 더 이상 사용하지 않게 되고 가비지 컬렉터가 이를 추적해 해당 변수가 차지하고 있던 메모리를 회수한다. var obj = { key: 'value' }; 변수 obj는 {key: value} 객체가 저장된 메모리를 가리키는 참조 값을 갖는다. 이 객체가 차지하고 있는 메모리 공간을 변수 obj가 참조하고 있는 한 가비지 컬렉터는 메모리를 회수하지 않는다. 하지만 다음과 같은... </summary> </entry> <entry><title>JavaScript - DOM(The Document Object Model)</title><link href="https://gunnkimkr.github.io/posts/javascript-dom/" rel="alternate" type="text/html" title="JavaScript - DOM(The Document Object Model)" /><published>2021-08-07T02:50:00+09:00</published> <updated>2021-08-21T18:18:00+09:00</updated> <id>https://gunnkimkr.github.io/posts/javascript-dom/</id> <content src="https://gunnkimkr.github.io/posts/javascript-dom/" /> <author> <name>Gunn Kim</name> </author> <category term="Programming" /> <category term="JavaScript" /> <summary> 노드 계층 구조 웹 페이지는 일종의 문서이며, 웹브라우저 호스트 환경에선 DOM을 문서에 엑세스하고 조작하기 위한 API로 사용한다. DOM을 통해 개발자는 페이지의 각 부분을 추가하거나 제거, 수정할 수 있다. DOM은 문서를 노드의 계층 구조로 표현하며, 자료구조에서 트리 구조와 같다. 노드에는 여러 타입이 있는데 각 노드 타입엔 서로 다른 데이터, 메서드가 있다. 노드의 계층 구조를 마크업과 다이어그램으로 표현하면 다음과 같다. &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset="UTF-8"&amp;gt; &amp;lt;title&amp;gt;Gunn’s Blog&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;l... </summary> </entry> <entry><title>JavaScript - 객체 지향 프로그래밍(Object-Oriented Programming)</title><link href="https://gunnkimkr.github.io/posts/javascript-object-oriented-programming/" rel="alternate" type="text/html" title="JavaScript - 객체 지향 프로그래밍(Object-Oriented Programming)" /><published>2021-08-01T19:15:00+09:00</published> <updated>2021-08-01T19:15:00+09:00</updated> <id>https://gunnkimkr.github.io/posts/javascript-object-oriented-programming/</id> <content src="https://gunnkimkr.github.io/posts/javascript-object-oriented-programming/" /> <author> <name>Gunn Kim</name> </author> <category term="Programming" /> <category term="JavaScript" /> <summary> 프로퍼티 타입 객체 프로퍼티의 각 속성은 두 가지 타입의 특별한 프로퍼티 디스크립터(property descriptors)를 갖는 데, 이는 객체 프로퍼티의 각 속성을 조작하는 데 사용한다. 디스크립터는 JS 엔진 내부에서 구현하는 것으로 자바스크립트에서 직접적으로 접근할 수는 없다. ECMAScript 원문에는 객체의 키(key)와 값(value)을 한 쌍으로 하는 데이터의 집합을 지칭할 땐 ‘Properties’로 쓰고 단일 프로퍼티를 지칭할 때는 ‘Attributes’를 쓴다. 한글로 번역하면 두 단어 모두 ‘속성’이지만 본문에서는 이를 구분하기 위해 ‘Properties’는 ‘프로퍼티’로 쓰고 ‘Attributes’는 ‘속성’으로 썼다. 데이터 프로퍼티 디스크립터 데이터 디스크립... </summary> </entry> </feed>
