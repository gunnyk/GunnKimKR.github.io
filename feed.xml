<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://gunnkimkr.github.io/</id><title>Gunn’s Blog</title><subtitle>프론트엔드 개발자 김건의 블로그입니다. 개발에 관한 정보를 공유하는 것은 물론, 다양한 주제의 소통창구로 이용할 수 있습니다.</subtitle> <updated>2021-08-01T19:16:33+09:00</updated> <author> <name>Gunn Kim</name> <uri>https://gunnkimkr.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://gunnkimkr.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://gunnkimkr.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Gunn Kim </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>JavaScript - 객체 지향 프로그래밍(Object-Oriented Programming)</title><link href="https://gunnkimkr.github.io/posts/javascript-object-oriented-programming/" rel="alternate" type="text/html" title="JavaScript - 객체 지향 프로그래밍(Object-Oriented Programming)" /><published>2021-08-01T19:15:00+09:00</published> <updated>2021-08-01T19:15:00+09:00</updated> <id>https://gunnkimkr.github.io/posts/javascript-object-oriented-programming/</id> <content src="https://gunnkimkr.github.io/posts/javascript-object-oriented-programming/" /> <author> <name>Gunn Kim</name> </author> <category term="Programming" /> <category term="JavaScript" /> <summary> 프로퍼티 타입 객체 프로퍼티의 각 속성은 두 가지 타입의 특별한 프로퍼티 디스크립터(property descriptors)를 갖는 데, 이는 객체 프로퍼티의 각 속성을 조작하는 데 사용한다. 디스크립터는 JS 엔진 내부에서 구현하는 것으로 자바스크립트에서 직접적으로 접근할 수는 없다. ECMAScript 원문에는 객체의 키(key)와 값(value)을 한 쌍으로 하는 데이터의 집합을 지칭할 땐 ‘Properties’로 쓰고 단일 프로퍼티를 지칭할 때는 ‘Attributes’를 쓴다. 한글로 번역하면 두 단어 모두 ‘속성’이지만 본문에서는 이를 구분하기 위해 ‘Properties’는 ‘프로퍼티’로 쓰고 ‘Attributes’는 ‘속성’으로 썼다. 데이터 프로퍼티 디스크립터 데이터 디스크립... </summary> </entry> <entry><title>JavaScript - 참조 타입 &amp; 함수 타입(Reference Types &amp; Function Type)</title><link href="https://gunnkimkr.github.io/posts/javascript-reference-types-function-type/" rel="alternate" type="text/html" title="JavaScript - 참조 타입 &amp; 함수 타입(Reference Types &amp; Function Type)" /><published>2021-07-24T04:45:00+09:00</published> <updated>2021-07-26T00:32:00+09:00</updated> <id>https://gunnkimkr.github.io/posts/javascript-reference-types-function-type/</id> <content src="https://gunnkimkr.github.io/posts/javascript-reference-types-function-type/" /> <author> <name>Gunn Kim</name> </author> <category term="Programming" /> <category term="JavaScript" /> <summary> Function 타입 ECMAScript에서 함수는 객체이다. 모든 함수는 Function 타입의 인스턴스이며 객체와 마찬가지로 프로퍼티와 메서드가 있다. 함수의 이름은 단순히 함수 객체를 가리키는 포인터 역할을 할 뿐이다. function greetings(name) { console.log(`Hello! ${name}.`); } let greet = greetings; greet('Gunn'); // "Hello! Gunn." greetings = null; greet('Gunn'); // "Hello! Gunn." greetings 함수를 생성하고 변수 greet에 greetings 함수를 대입했다. greetings 함수의 이름은 함수 정의가 저장된 메모리를 가리키는 포인터이... </summary> </entry> <entry><title>JavaScript - 실행 컨텍스트와 스코프(Execution Context and Scope)</title><link href="https://gunnkimkr.github.io/posts/javascript-execution-context-and-scope/" rel="alternate" type="text/html" title="JavaScript - 실행 컨텍스트와 스코프(Execution Context and Scope)" /><published>2021-07-17T05:30:00+09:00</published> <updated>2021-07-26T00:32:00+09:00</updated> <id>https://gunnkimkr.github.io/posts/javascript-execution-context-and-scope/</id> <content src="https://gunnkimkr.github.io/posts/javascript-execution-context-and-scope/" /> <author> <name>Gunn Kim</name> </author> <category term="Programming" /> <category term="JavaScript" /> <summary> 실행 컨텍스트 실행 컨텍스트는 코드의 런타임 평가를 추적하는 데 사용한다. 즉, 실행 컨텍스트는 자바스크립트 코드가 실행되는 환경을 말하며 코드 실행을 위해 필요한 정보를 담고 있다. 실행 컨텍스트는 추상화된 개념이므로 코드로 직접 접근은 불가능하다. 실행 컨텍스트에는 변수 객체, 스코프 체인, this 값이 있다. 실행 컨텍스트의 종류로는 전역 실행 컨텍스트, 함수 실행 컨텍스트가 있다. 실행 컨텍스트의 종류에는 Eval 실행 컨텍스트도 있다. eval 함수가 호출되면 자체적인 실행 컨텍스트를 갖지만 eval 함수의 사용을 권장하지 않으므로 서술하지 않았다. ECMAScript를 구현한 환경에 따라 전역 실행 컨텍스트를 부르는 이름이 다른데, 웹 브라우저에서는 window가 전역 실... </summary> </entry> <entry><title>JavaScript - 원시 값과 참조 값 &amp; 값 복사(Primitive and Reference Values &amp; Copying Values)</title><link href="https://gunnkimkr.github.io/posts/javascript-primitive-and-reference-values-and-copying-values/" rel="alternate" type="text/html" title="JavaScript - 원시 값과 참조 값 &amp; 값 복사(Primitive and Reference Values &amp; Copying Values)" /><published>2021-07-08T17:50:00+09:00</published> <updated>2021-07-08T17:50:00+09:00</updated> <id>https://gunnkimkr.github.io/posts/javascript-primitive-and-reference-values-and-copying-values/</id> <content src="https://gunnkimkr.github.io/posts/javascript-primitive-and-reference-values-and-copying-values/" /> <author> <name>Gunn Kim</name> </author> <category term="Programming" /> <category term="JavaScript" /> <summary> 값 복사 값에 의한 값 복사 let num1 = 5; let num2 = num1; num1 = 10; console.log(num2); // 5 num1에는 5가 저장되어 있다. num1을 num2에 대입하면 num1에 저장된 값 5를 새로 생성한 뒤에 값 복사가 이루어진다. num1과 num2는 각각 독립적인 존재이기 때문에 어느 한쪽에서 값이 바뀌어도 다른 쪽에는 영향이 없다. 참조에 의한 값 복사 참조 값 같은 경우 변수를 다른 변수에 복사할 때 원시 값과는 다른 방식으로 값 복사가 이루어진다. 참조 값은 변수에 객체 자체가 저장되는 것이 아니라 객체에 대한 참조 값이 저장되기 때문에 다른 변수에 복사할 때도 객체 자체가 아닌 참조 값이 복사된다. let obj1 = new O... </summary> </entry> <entry><title>JavaScript - 원시 값과 참조 값 &amp; 동적 프로퍼티(Primitive and Reference Values &amp; Dynamic Properties)</title><link href="https://gunnkimkr.github.io/posts/javascript-primitive-and-reference-values-and-dynamic-properties/" rel="alternate" type="text/html" title="JavaScript - 원시 값과 참조 값 &amp; 동적 프로퍼티(Primitive and Reference Values &amp; Dynamic Properties)" /><published>2021-07-07T05:00:00+09:00</published> <updated>2021-07-07T05:00:00+09:00</updated> <id>https://gunnkimkr.github.io/posts/javascript-primitive-and-reference-values-and-dynamic-properties/</id> <content src="https://gunnkimkr.github.io/posts/javascript-primitive-and-reference-values-and-dynamic-properties/" /> <author> <name>Gunn Kim</name> </author> <category term="Programming" /> <category term="JavaScript" /> <summary> 원시 값과 참조 값 자바스크립트의 변수에는 원시 값과 참조 값 두 가지 타입의 값을 저장할 수 있다. 원시 값 string, number, bigint, boolean, undefined, symbol, null 참조 값 object 변수에 값이 할당되면 자바스크립트 엔진은 할당된 값이 원시 값인지 참조 값인지 판단하게 되는데 어떤 값이냐에 따라 값에 접근하는 방식이 다르다. 원시 값은 변수에 실제 값으로 저장되기 때문에 값으로 접근하지만 참조 값은 객체 자체가 저장되는 것이 아니라 객체에 대한 참조 값이 저장되기 때문에 참조로 접근한다. 즉, 참조 값을 저장하고 있는 변수는 메모리에 저장된 객체를 가리키는 포인터 역할을 하는 것이다. 💡 원시 값은 변경할 수 없다? le... </summary> </entry> </feed>
