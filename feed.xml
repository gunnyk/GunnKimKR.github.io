<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://gunnkimkr.github.io/</id><title>Gunn’s Blog</title><subtitle>프론트엔드 개발자 김건의 블로그입니다. 개발에 관한 정보를 공유하는 것은 물론, 다양한 주제의 소통창구로 이용할 수 있습니다.</subtitle> <updated>2021-07-08T17:59:11+09:00</updated> <author> <name>Gunn Kim</name> <uri>https://gunnkimkr.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://gunnkimkr.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://gunnkimkr.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Gunn Kim </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>JavaScript - 원시 값과 참조 값(Primitive and Reference Values) &amp; 값 복사(Copying Values)</title><link href="https://gunnkimkr.github.io/posts/javascript-primitive-and-reference-values-copying-values/" rel="alternate" type="text/html" title="JavaScript - 원시 값과 참조 값(Primitive and Reference Values) &amp; 값 복사(Copying Values)" /><published>2021-07-08T17:50:00+09:00</published> <updated>2021-07-08T17:50:00+09:00</updated> <id>https://gunnkimkr.github.io/posts/javascript-primitive-and-reference-values-copying-values/</id> <content src="https://gunnkimkr.github.io/posts/javascript-primitive-and-reference-values-copying-values/" /> <author> <name>Gunn Kim</name> </author> <category term="Programming" /> <category term="JavaScript" /> <summary> 값 복사 값에 의한 값 복사 let num1 = 5; let num2 = num1; num1 = 10; console.log(num2); // 5 num1에는 5가 저장되어 있다. num1을 num2에 대입하면 num1에 저장된 값 5를 새로 생성한 뒤에 값 복사가 이루어진다. num1과 num2는 각각 독립적인 존재이기 때문에 어느 한쪽에서 값이 바뀌어도 다른 쪽에는 영향이 없다. 참조에 의한 값 복사 참조 값 같은 경우 변수를 다른 변수로 복사할 때 원시 값과는 다른 방식으로 값 복사가 이루어진다. 참조 값은 변수에 객체 자체가 저장되는 것이 아니라 객체에 대한 참조 값이 저장되기 때문에 다른 변수에 복사할 때도 객체 자체가 아닌 참조 값이 복사된다. let obj1 = new O... </summary> </entry> <entry><title>JavaScript - 원시 값과 참조 값(Primitive and Reference Values) &amp; 동적 프로퍼티(Dynamic Properties)</title><link href="https://gunnkimkr.github.io/posts/javascript-primitive-and-reference-values-dynamic-properties/" rel="alternate" type="text/html" title="JavaScript - 원시 값과 참조 값(Primitive and Reference Values) &amp; 동적 프로퍼티(Dynamic Properties)" /><published>2021-07-07T05:00:00+09:00</published> <updated>2021-07-07T05:00:00+09:00</updated> <id>https://gunnkimkr.github.io/posts/javascript-primitive-and-reference-values-dynamic-properties/</id> <content src="https://gunnkimkr.github.io/posts/javascript-primitive-and-reference-values-dynamic-properties/" /> <author> <name>Gunn Kim</name> </author> <category term="Programming" /> <category term="JavaScript" /> <summary> 원시 값과 참조 값 자바스크립트의 변수에는 원시 값과 참조 값 두 가지 타입의 값을 저장할 수 있다. 원시 값 string, number, bigint, boolean, undefined, symbol, null 참조 값 object 변수에 값이 할당되면 자바스크립트 엔진은 할당된 값이 원시 값인지 참조 값인지 판단하게 되는데 어떤 값이냐에 따라 값에 접근하는 방식이 다르다. 원시 값은 변수에 실제 값이 저장되기 때문에 값으로 접근하지만 참조 값은 객체 자체가 저장되는 것이 아니라 객체에 대한 참조 값이 저장되기 때문에 참조로 접근한다. 즉, 참조 값을 저장하고 있는 변수는 메모리에 객체를 가리키는 포인터 역할을 하는 것이다. 💡 원시 값은 변경할 수 없다? let str... </summary> </entry> <entry><title>Electron - 일렉트론 앱 만들기(Create an Electron App)</title><link href="https://gunnkimkr.github.io/posts/electron-create-an-electron-app/" rel="alternate" type="text/html" title="Electron - 일렉트론 앱 만들기(Create an Electron App)" /><published>2021-07-02T03:25:00+09:00</published> <updated>2021-07-02T03:25:00+09:00</updated> <id>https://gunnkimkr.github.io/posts/electron-create-an-electron-app/</id> <content src="https://gunnkimkr.github.io/posts/electron-create-an-electron-app/" /> <author> <name>Gunn Kim</name> </author> <category term="Framework" /> <category term="Electron" /> <summary> 일렉트론 시작하기 초기 셋업 일랙트론을 시작하기 위해서는 Node.js, npm, Electron, Chromium을 설치해야한다. Node.js와 npm 설치 후 터미널에 다음 명령을 실행해 관련 패키지를 설치한다. npm i -D electron@latest 프로젝트 폴더를 만들고 터미널에 다음 명령을 실행해 관련 패키지를 설치한다. npm install --save-dev electron package.json 파일의 형식은 다음과 같아야 한다. { "name": "my-electron-app", "version": "1.0.0", "description": "Hello World!", "main": "main.js", "author": "my name", ... </summary> </entry> <entry><title>JavaScript - 자료형(Data types) &amp; 문자형(String)</title><link href="https://gunnkimkr.github.io/posts/javascript-data-types-string/" rel="alternate" type="text/html" title="JavaScript - 자료형(Data types) &amp; 문자형(String)" /><published>2021-07-01T22:55:00+09:00</published> <updated>2021-07-01T22:55:00+09:00</updated> <id>https://gunnkimkr.github.io/posts/javascript-data-types-string/</id> <content src="https://gunnkimkr.github.io/posts/javascript-data-types-string/" /> <author> <name>Gunn Kim</name> </author> <category term="Programming" /> <category term="JavaScript" /> <summary> 문자형 자바스크립트는 타 언어와 같이 글자 하나만 저장하는 자료형이 없다. 모든 글자는 문자열 형태로 저장되며, 인코딩 방식에 상관없이 UTF-16 형식을 따른다.1 'use strict' let str = 'Hello'; str[0] = 'J'; // TypeError: Attempted to assign to readonly property. console.log(str[0]); // 'H' 자바스크립트의 문자열은 immutable이기 때문에 글자를 바꾸려고 하면 읽기 전용 속성에 할당을 시도했다며 TypeError가 발생한다. 문자열을 바꾸려면 새로운 문자열을 생성한 후 변수에 할당하면 된다. 문자열 관련 메서드 특정 위치의 글자 찾기 - charAt let str = 'He... </summary> </entry> <entry><title>JavaScript - 자료형(Data types) &amp; 숫자형(Number)</title><link href="https://gunnkimkr.github.io/posts/javascript-data-types-number/" rel="alternate" type="text/html" title="JavaScript - 자료형(Data types) &amp; 숫자형(Number)" /><published>2021-06-30T17:20:00+09:00</published> <updated>2021-06-30T17:20:00+09:00</updated> <id>https://gunnkimkr.github.io/posts/javascript-data-types-number/</id> <content src="https://gunnkimkr.github.io/posts/javascript-data-types-number/" /> <author> <name>Gunn Kim</name> </author> <category term="Programming" /> <category term="JavaScript" /> <summary> 숫자형 15; // 15 15.134; // 15.134 010 // 8 0xA // 10 2 ** 9999 // Infinity (-2) ** 9999 // -Infinity 15.00 // 15 1 * (10 ** 21) // 1e+21 1 / 10000000 // 1e-7 1 / '문자' // NaN 4번 줄은 8진법으로 숫자 8을 표현했다. 8진수는 첫 번째 숫자가 0으로 시작해야 한다. 5번 줄은 16진법으로 숫자 10을 표현했다. 16진수는 0x로 시작해야 한다. 7번과 8번 줄은 ECMAScript로 나타낼 수 있는 숫자 범위를 벗어났기 때문에 양의 무한대 Infinity와 음의 무한대 -Infinity로 결과가 출력됐다. 연산 결과로 Infinity 값을 반환하면 더 이... </summary> </entry> </feed>
